{
  "name": "GPS3",
  "tagline": "Python 2.7 - 3.5 interface to gpsd",
  "body": "#### README #####\r\n\r\nThe recent addition is the 'threading adaptor'.  The simple and efficient Python2.7-3.5 client, is pre-packaged as a threaded client,\r\n\r\n>     from agps3threaded import AGPS3mechanism\r\n\r\nYou then engage the thread triumvirate.\r\n\r\n>     agps_thread = AGPS3mechanism()  # Instantiate the mechanism\r\n>     agps_thread.stream_data()  # Stream the data from host, port, devicepath\r\n>     agps_thread.run_thread()  #  Run unpacking iteration as a thread with throttle control for empty look ups.\r\n\r\nFour lines of code that lets you connect, communicate and control most of what you expect a gpsd to do.\r\n\r\n>     while True:  # All data is available via instantiated thread data stream attribute.\r\n>                  # lines #140-ff of the client /usr/local/lib/python3.5/dist-packages/gps3/agps.py\r\n>         print('----------------')\r\n>         print(                   agps_thread.data_stream.time)\r\n>         print('Lat:{}   '.format(agps_thread.data_stream.lat))\r\n>         print('Lon:{}   '.format(agps_thread.data_stream.lon))\r\n>         print('Speed:{} '.format(agps_thread.data_stream.speed))\r\n>         print('Course:{}'.format(agps_thread.data_stream.track))\r\n>         print('----------------')\r\n>         sleep(60)  # Sleep, or do other things for as long as you like.\r\n\r\nWithout arguments between the brackets the threaded client defaults to `host='127.0.01'`, `port=2947`, `gpsd_protocol='json'`, and `usnap=0.2`, for a respectable default of 2/10th of a second micro nap after each empty socket lookup.\r\n\r\nThe rest of the project is in **DESCRIPTION.rst**, or documented in the files themselves.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}